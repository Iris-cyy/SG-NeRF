general {
    base_exp_dir = ./exp/dtu/scanCASE_NAME/
    recording = [
        ./exp_runner.py
    ]
}

dataset {
    data_dir = ../data/dtu/CASE_NAME
    img_dir = train
    render_cameras_name = cameras_sphere.npz
    object_cameras_name = cameras_sphere.npz
    colmap_db = database.db
    n_match = 16
    pair_thresh = 45
    data_type = DTU
}

train {
    learning_rate = 5e-4
    learning_rate_alpha = 0.05
    end_iter = 300000
    batch_size = 512
    validate_resolution_level = 4
    warm_up_end = 5000
    anneal_end = 50000
    use_white_bkgd = False

    save_freq = 10000
    val_freq = 2500
    clear_freq = 10000
    val_mesh_freq = 5000
    report_freq = 100
    savepose_freq = 10000
    evalpose_freq = 1000

    igr_weight = 0.1
    mask_weight = 0.0

    learnable = False
    init_poses = True
    init_focal = True
    focal_lr = 5e-4
    pose_lr = 5e-4
    focal_lr_gamma = 0.9
    pose_lr_gamma = 0.9
    step_size = 3000
}

model {
    nerf {
        D = 8,
        d_in = 4,
        d_in_view = 3,
        W = 256,
        multires = 10,
        multires_view = 4,
        output_ch = 4,
        skips=[4],
        use_viewdirs=True
    }

    sdf_network {
        d_out = 257
        d_in = 3
        d_hidden = 256
        n_layers = 8
        skip_in = [4]
        multires = 6
        bias = 0.5
        scale = 1.0
        geometric_init = True
        weight_norm = True
    }

    variance_network {
        init_val = 0.3
    }

    rendering_network {
        d_feature = 256
        mode = idr
        d_in = 9
        d_out = 3
        d_hidden = 256
        n_layers = 4
        weight_norm = True
        multires_view = 4
        squeeze_out = True
    }

    neus_renderer {
        n_samples = 64
        n_importance = 64
        n_outside = 32
        up_sample_steps = 4
        perturb = 1.0
    }

    focal {
        req_grad = False
        fx_only = True
        order = 2
    }

    pose {
        learn_R = False
        learn_t = False
    }

    iou {
        resolution = 64
        topk = 8
        weight = 0.2
    }

    c2f {
        coarse2fine = True
        ada_patience = 5
        ada_alpha = 0.4
        gauss_init_ratio = 0.02
        coarse_iter = 5000
        c2f_debug = False
    }

    confidence {
        update = False
        add_init = False
        increase = True
        weight = 1
        conf_weight = 1.0
    }
}
